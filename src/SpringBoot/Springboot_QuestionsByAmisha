1. Spring MVC with example and tricky interview questions and programs
2. Spring Data JPA with example and tricky interview questions and programs
3. Hibernate with example and tricky interview questions and programs
4. JDBC , What is the difference between Statement and PreparedStatement in JDBC?
-Statement is used for executing static SQL queries. PreparedStatement is used for executing precompiled
     SQL queries with parameters, providing better performance and security against SQL injection.

5. Dependency injection in springboot with example and tricky interview questions and programs
6. Spring MVC vs Spring Boot
7. Circular Dependency - how to break
-Here are different ways to handle circular dependencies:

 Using @Lazy Annotation-    When ServiceA is being initialized, Spring injects a proxy instance of ServiceB
                            because of the @Lazy annotation.This proxy instance will delegate calls to the actual ServiceB instance once
                            it is fully initialized.

 Setter Injection-  Spring first creates instances of ServiceA and ServiceB without injecting any dependencies.
                    After the bean instances are created, Spring performs dependency injection through the
                    setter methods.

 Field Injection-   Similar to setter injection, Spring first creates the instances of ServiceA and ServiceB
                    without injecting any dependencies.After the bean instances are created, Spring injects dependencies directly
                    into the fields.This ensures that both beans exist before their dependencies are injected, thus breaking the
                    circular dependency.

 Using ObjectFactory or Provider-  ServiceB can get an instance of ServiceA by calling
                                   serviceAFactory.getObject().This lazy resolution of dependencies ensures that the actual instances are
                                   created and injected only when needed, breaking the circular dependency.

8. Annotations in springboot with example and tricky interview questions and programs
9. SpringBoot starters
10. How to use Actuator in spring Appilaction
-/actuator/health: Shows the health status of the application.
 /actuator/info: Displays arbitrary application info.
 /actuator/metrics: Shows metrics information.
 /actuator/env: Displays environment properties.
 /actuator/beans: Shows a list of all beans in the application context.
 http://localhost:8080/actuator/health.

11. cross origin
12. HTTP Requests and Annotations
@RequestMapping("/home"

-@GetMapping("/getAllEmployees")
public List<Employee> getAllEmployees(){
employeeRepository.findAll();
}

@PostMapping("/createEmployee"){
public void CreateEmployee(Employee employee){
employeeRepository.save(employee);
}

//PathVariable - /users?id=1
-@GetMapping("/getEmployeeById/{id}")
public Employee getEmployeeById(@Pathvariable("id") Long id){
employeeRepository.find(id);
}

//RequestParam - /users/1
-@GetMapping("/getEmployeeById")
public Employee getEmployeeById(@RequestParam("id") Long id){
employeeRepository.find(id);
}

13. ResponseEntity with examples
-ResponseEntity in Spring Boot allows you to have full control over the HTTP response, including status codes,
headers, and the body. This enables you to create more robust and informative APIs, which are crucial for
client-server communication in RESTful services.you can return more detailed responses from your controller
methods.

- @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id){
    Employee employee = employeeService.findEmployeeById(id);
    if(employee!=null){
    return new ResponseEntity<Employee>(employee,HTTP_STATUS.OK);
    else
    return new ResponseEntity<Employee>(HTTP_STATUS.NOT_FOUND);
    }

- @PostMapping
    public ResponseEntity<String> createUser(@RequestBody User user) {
        userService.createUser(user);
        return new ResponseEntity<>("User created successfully", HttpStatus.CREATED);
    }

- @GetMapping("/headers/{id}")
  public ResponseEntity<User> getUserWithHeaders(@PathVariable Long id) {
      User user = userService.getUserById(id);
      if (user != null) {
          HttpHeaders headers = new HttpHeaders();
          headers.add("Custom-Header", "CustomHeaderValue");
          return new ResponseEntity<>(user, headers, HttpStatus.OK);
      } else {
          return new ResponseEntity<>(HttpStatus.NOT_FOUND);
      }
  }

14.Joins and mapping in springboot entity class with examples.FetchType.LAZY,
@GeneratedValue(strategy = GenerationType.IDENTITY),cascade = CascadeType.ALL,
            ManyToMany-        @JoinTable(
                                             name = "student_course",
                                             joinColumns = @JoinColumn(name = "student_id"),
                                             inverseJoinColumns = @JoinColumn(name = "course_id")
                                         )
15. Validation in SpringBoot
16. Exception handling in springBoot with examples - @ControllerAdvice , @ExceptionHandler
17. Microservices vs Monolithic
18. SOAP vs REST with examples
19. How microservices communicate with examples and tricky questions
20. How do microservices communicate using webclient with examples
21. Circuit Breaker with example
22. service Discovery with examples

// Interview 1
Q1. how to instantiate a teacher class and student class if it has a dependency on one another using java
springboot. How to overcome this circular dependency?
Q2. Design Internal structure of HashMap.
Q3. Have you used Garbage collector?
Q4. Rate Limiter design - that creates connection if it has availabilty and release connection accordingly.

// Interview 2
Q1. Circular Dependency
Q2. A prototype class A and you want to inject Singleton class B into A, then what will happen
Q3. 2 threads are there- 1 will print all odd numbers and other will print all the even no -
so how to print 1 2 3 4 5 6 7 8 9 10 in definite  order.







